#lang racket

(require racket/gui/base)
(require "simulator/interface.rkt")
(require "INFRABEL/INFRABEL.rkt")
(require "NMBS/NMBS.rkt")

;; ======================= STRING CONSTANTS =======================

(define TRAINS_VIEW "Treinoverzicht")
(define SWITCHES_VIEW "Wisselsoverzicht")
(define DETECTION_BLOCKS_VIEW "Detectieblokkenoverzicht")
(define TRAIN_ID_LABEL "Trein met ID:   ")
(define SWITCH_ID_LABEL "Switch met ID:   ")
(define DETECTION_BLOCK_ID_LABEL "Detectieblok met ID:   ")
(define NO_TRAIN_PRESENT "Geen trein aanwezig")
(define ADD_TRAIN_LABEL "Voeg trein toe")
(define NEW_TRAIN_TITLE "Nieuwe trein")
(define AUTOMATIC_ROUTE "Automatisch traject")
(define ADDED_TRAIN_TO_TRACK "Nieuwe trein toegevoegd aan spoor")
(define SPEED_TRAIN_INCREASED "Snelheid verhoogd van trein met ID: ")
(define SPEED_TRAIN_DECREASED "Snelheid verlaagd van trein met ID: ")
(define SWITCH_CHANGED " veranderd naar stand: ")
(define INCREASE_SPEED "+ Snelheid")
(define DECREASE_SPEED "- Snelheid")



(define window (new frame%
                    [label "User Interface"]
                    [width 600]
                    [height 600]))


(define (change-tab tp event)
  (when (eq? (send event get-event-type) 'tab-panel)
    (fill-tab-content tp)))

(define (fill-tab-content tp)
  (define current-tab-name
    (send tp get-item-label (send tp get-selection)))
  (send tp change-children
        (cond ((eq? current-tab-name "Functionaliteit")
               tab-functionaliteit)
              ((eq? current-tab-name "Overzicht")
               tab-overzicht)
              ((eq? current-tab-name "Logboek")
               tab-logboek)
              (else (display "error - tab doesn't exist")))))

(define tab-panel (new tab-panel%
                       [parent window]
                       [choices (list "Functionaliteit"
                                      "Overzicht"
                                      "Logboek")]
                       [callback change-tab]))


; ======================= CONTENT PANELS =======================

; Panel om alle treinen en hun details in weer te geven
(define trains-panel (new vertical-panel%	 
                          [parent tab-panel]	 
                          [style (list 'border)]))

; Panel om wissels met hun stand in weer te geven
(define switches-panel (new vertical-panel%	 
                            [parent tab-panel]	 
                            [style (list 'border)]))

; Panel om detectieblokken met hun status in weer te geven
(define detection-blocks-panel (new vertical-panel%	 
                                    [parent tab-panel]	 
                                    [style (list 'border)]))

; Panel om gebeurtenissen in te loggen
(define log-panel (new vertical-panel%
                       [parent tab-panel]
                       [style (list 'border)]))


; Nieuwe trein aan Treinoverzicht toevoegen
(define (add-to-trains-panel train-id)
  (define panel (new horizontal-panel% [parent trains-panel]
                     [alignment '(center top)]))
  (new message% 
       [label (string-append TRAIN_ID_LABEL "\t" train-id "\t")]
       [parent panel])
  (new button% [parent panel] [label INCREASE_SPEED]
       [callback (lambda (b e)(new message%
                                   [label (string-append SPEED_TRAIN_INCREASED train-id)]
                                   [parent log-panel])
                   ((nmbs 'verhoog-snelheid-trein!) train-id)
                   (send speed set-label (number->string ((nmbs 'geef-snelheid-trein) train-id))))])
  (define speed (new message%
                     [label (number->string ((nmbs 'geef-snelheid-trein) train-id))]
                     [parent panel]
                     [horiz-margin 50]
                     [auto-resize #t]))
  (new button% [parent panel] [label DECREASE_SPEED]
       [callback (lambda (b e)(new message%
                                   [label (string-append SPEED_TRAIN_DECREASED train-id)]
                                   [parent log-panel])
                   ((nmbs 'verlaag-snelheid-trein!) train-id)
                   (send speed set-label (number->string ((nmbs 'geef-snelheid-trein) train-id))))]))


; Wanneer op een radiobutton wordt geklikt (switches)
(define (onRadioClick radiobtn event switch-id)
  (let ((selection (send radiobtn get-selection))
        (switch-id-string (symbol->string switch-id)))
    (when selection
      (cond ((= selection 0)
             ((nmbs 'verander-wisselstand!) switch-id 1)
             (new message%
                  [label (string-append SWITCH_ID_LABEL switch-id-string SWITCH_CHANGED (send radiobtn get-item-label 0))]
                  [parent log-panel]))
            ((= selection 1)
             ((nmbs 'verander-wisselstand!) switch-id 2)
             (new message%
                  [label (string-append SWITCH_ID_LABEL switch-id-string SWITCH_CHANGED (send radiobtn get-item-label 1))]
                  [parent log-panel]))))))

; Het panel met de wissels vullen
(define (fill-switches-panel)
  (let ((switch-ids ((nmbs 'geef-wissel-ids))))
    (define (iter ids)
      (when (not (null? ids))
        (define panel (new horizontal-panel% [parent switches-panel]
                           [alignment '(center top)]))
        (new message% 
             [label (string-append SWITCH_ID_LABEL (symbol->string (car ids)) "\t")]
             [parent panel])
        (new radio-box% [label "stand: "][choices (list "1" "2")][parent panel]
             [style (list 'horizontal)]
             [callback (lambda (r e) (onRadioClick r e (car ids)))])
        (iter (cdr ids))))
    (iter switch-ids)))

; Statussen van de detectieblokken op volgorde (message% structs)
(define status-list '())

; Het panel met de detectieblokken vullen
(define (fill-detection-blocks-panel)
  (let ((detection-block-ids ((nmbs 'geef-detectieblok-ids))))
    (define (iter ids)
      (when (not (null? ids))
        (define panel (new horizontal-panel% [parent detection-blocks-panel]
                           [alignment '(center top)]))
        (new message% 
             [label (string-append DETECTION_BLOCK_ID_LABEL (symbol->string (car ids)) "\t --------> \t")]
             [parent panel])
        (set! status-list (cons (new message% 
                                     [label NO_TRAIN_PRESENT]
                                     [parent panel]) status-list))
        (send destination-list append (symbol->string (car ids)) (car ids))
        (iter (cdr ids))))
    (iter detection-block-ids)
    (set! status-list (reverse status-list))))

; Statussen van de detectieblokken verversen
(define (refresh-detection-blocks)
  (let ((detection-block-ids ((nmbs 'geef-detectieblok-ids))))
    ; statuses = message% structs
    (define (iter ids statuses)
      (when (not (null? ids))
        ; over alle treinen gaan
        (let trains-iter
          ((train-series ((nmbs 'geef-aanwezige-treinen)))
           (trains (((nmbs 'geef-aanwezige-treinen)) 'reeks)))
          (when (not (null? trains))
            ; Als id van detectieblok waar trein aanwezig is, gelijk is aan huidig detectieblok-id
            (if (eq? ((train-series 'detectieblok-trein) ((car trains) 'trein-id))
                     (car ids))
                (send (car statuses) set-label (symbol->string ((car trains) 'trein-id)))
                (send (car statuses) set-label NO_TRAIN_PRESENT))
            (trains-iter train-series (cdr trains))))
        (iter (cdr ids) (cdr statuses))))
    (iter detection-block-ids status-list)))

; ======================= DIALOG - NIEUWE TREIN =======================

(define new-train-dialog (new dialog%	 
                              [label NEW_TRAIN_TITLE]	 
                              [parent window]
                              [width 300]	 
                              [height 300]))

; Tekstvelden
(define id (new text-field% [parent new-train-dialog] [label "Trein-ID: "]))
(define direction (new text-field% [parent new-train-dialog] [label "Richting: "]))
(define segment (new text-field% [parent new-train-dialog] [label "Huidig segment: "]))
; Om de knoppen te centreren
(define panel (new horizontal-panel% [parent new-train-dialog]
                   [alignment '(center center)]))
; Twee knoppen
(define cancelBtn (new button% [parent panel] [label "Annuleer"]
                       [callback (lambda (b e) (send new-train-dialog show #f))]))
(define confirmBtn (new button% [parent panel] [label "Bevestig"]
                        [callback (lambda (b e)(onClickConfirm (send id get-value)
                                                               (send direction get-value)
                                                               (send segment get-value))
                                    (add-to-trains-panel (send id get-value))
                                    (send new-train-dialog show #f))]))


; ======================= AUTOMATISCHE ROUTE STARTEN =======================

(define (onClickStartRoute btn event)
  (let ((train-id (send train-list get-data
                        (car (send train-list get-selections))))
        (destination (send destination-list get-data
                           (car (send destination-list get-selections)))))
    (send auto-route-dialog show #f)
    ((nmbs 'bereken-traject) train-id destination)))

; ======================= DIALOG - AUTOMATISCHE ROUTE =======================

(define auto-route-dialog (new dialog%	 
                               [label AUTOMATIC_ROUTE]	 
                               [parent window]
                               [width 300]	 
                               [height 250]))

(define train-list (new list-box%
                        [label "Trein: "]
                        [choices '()]
                        [parent auto-route-dialog]))

(define destination-list (new list-box%
                              [label "Eindbestemming: "]
                              [choices '()]
                              [parent auto-route-dialog]))

(define start-route-btn (new button% [parent auto-route-dialog] [label "Start traject"]
                             [callback onClickStartRoute]))

; ======================= TREINEN TOEVOEGEN =======================

(define (onClickConfirm id direction segment)
  (new message%
       [label ADDED_TRAIN_TO_TRACK]
       [parent log-panel])
  (send train-list append id (string->symbol id))
  ((nmbs 'zet-trein-op-spoor) id direction segment))

;; ======================= TAB LAYOUTS =======================


; Layout voor het tablad 'Functionaliteit'
(define (tab-functionaliteit children-areas)
  (list
   (new button%
        [label ADD_TRAIN_LABEL]
        [parent tab-panel]
        [callback (lambda (b e) (send new-train-dialog show #t))])
   (new button%
        [label AUTOMATIC_ROUTE]
        [parent tab-panel]
        [callback (lambda (b e) (send auto-route-dialog show #t))])))

; Layout voor het tablad 'Spoornetwerk'
(define (tab-overzicht children-areas)
  (list
   (new message%
        [label TRAINS_VIEW]
        [parent tab-panel]
        [vert-margin 20])
   trains-panel
   (new message%
        [label SWITCHES_VIEW]
        [parent tab-panel]
        [vert-margin 20])
   switches-panel
   (new message%
        [label DETECTION_BLOCKS_VIEW]
        [parent tab-panel]
        [vert-margin 20])
   (new button% [parent tab-panel] [label "Refresh status"]
        [callback (lambda (b e) (refresh-detection-blocks))])
   detection-blocks-panel))

; Layout voor het tablad 'Logboek'
(define (tab-logboek children-areas)
  (list
   log-panel))


;; ======================= SETUP PROCEDURE =======================
;; Start de interface (toont spoornetwerk + GUI)

(setup-loop-and-switches)
(start)

(define nmbs (maak-nmbs))

(send window show #t)
(fill-tab-content tab-panel)
(fill-switches-panel)
(fill-detection-blocks-panel)

